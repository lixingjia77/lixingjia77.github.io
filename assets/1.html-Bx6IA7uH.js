import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-Du_RTeqv.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="seata分布式事务模式详解" tabindex="-1"><a class="header-anchor" href="#seata分布式事务模式详解"><span>Seata分布式事务模式详解</span></a></h1><p>毕业前在蚂蚁实习的组通常会让实习生和校招生选择一个中间件深入学习一下，并作为答辩的一部分。当时很想选XTS，觉得分布式事务框架很牛逼。但因为选XTS的同学太多了，在老板建议下还是看了mq。好在实习也没那么多工作要做，还是看了很多XTS的分享和源码，也做了很多笔记。但离职时笔记也带不出来，时间长了很多细节都忘了。<br> 分布式事务框架在现在的互联网绝非常用的框架，大多数场景下也绝非好的选择。但依然可以从中看到阿里蚂蚁多年的技术沉淀。开源的seata吸收了淘宝TXC和蚂蚁XTS，希望可以学到老牌大厂半个时代之前的中间件开发者对技术和业务的思考。</p><p>对Seata的学习可以分成几个部分吧</p><ol><li>Seata各模式概述：总结下AT模式、TCC模式、Saga模式和XA模式</li><li>Seata架构/模块设计</li><li>AT模式源码走读</li><li>TCC模式源码走读</li><li>Saga模式源码走读</li><li>XA模式源码走读</li><li>分布式事务讨论：是否要使用分布式事务中间件，代替方案/更优的实践。</li></ol><p>备注：相关代码的走读客户端会参考go的实现，服务端参考java</p><hr><p>Seata作为分布式事务解决方案，其核心目标是确保分布式环境下多个服务操作的原子性——要么全部成功，要么全部回滚。</p><p>在单体应用中，事务的原子性可以通过数据库本地事务来保证。然而在微服务架构中，各个服务拥有独立的数据库，分布式事务的实现变得相当复杂。Seata提供了四种事务模式来应对不同场景的需求。</p><h2 id="at模式" tabindex="-1"><a class="header-anchor" href="#at模式"><span>AT模式</span></a></h2><p>AT模式是Seata主推的分布式事务模式，其核心原理是通过拦截和改写业务SQL来实现自动化的分布式事务管理。</p><h3 id="技术原理" tabindex="-1"><a class="header-anchor" href="#技术原理"><span>技术原理</span></a></h3><p>以下通过一个具体示例来说明AT模式的工作机制：</p><p>假设有如下用户表结构：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>业务代码需要执行一个简单的更新操作：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在AT模式下，业务代码只需配置Seata的代理数据源，即可无侵入地实现分布式事务。Seata会在底层对SQL进行拦截和改写，具体流程如下：</p><h4 id="第一阶段-业务sql执行与回滚日志生成" tabindex="-1"><a class="header-anchor" href="#第一阶段-业务sql执行与回滚日志生成"><span>第一阶段：业务SQL执行与回滚日志生成</span></a></h4><ol><li><p><strong>前镜像获取</strong>：Seata首先查询业务SQL执行前的数据状态</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FOR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查询结果: (1, &#39;Tom&#39;, 30)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>业务SQL执行</strong>：执行原始业务逻辑</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 数据更新为: (1, &#39;Tom&#39;, 31)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>后镜像获取</strong>：记录业务SQL执行后的数据状态</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查询结果: (1, &#39;Tom&#39;, 31)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>回滚日志存储</strong>：将前后镜像数据存储到UNDO_LOG表中，为可能的回滚操作做准备</p></li><li><p><strong>全局锁申请</strong>：在本地事务提交前，向TC（Transaction Coordinator）申请全局锁，本例中为user表id=1的行锁</p></li><li><p><strong>本地事务提交</strong>：获得全局锁后提交本地事务，等待TC的最终决议</p></li></ol><h4 id="第二阶段-提交或回滚" tabindex="-1"><a class="header-anchor" href="#第二阶段-提交或回滚"><span>第二阶段：提交或回滚</span></a></h4><p><strong>异步提交场景</strong>：<br> 当所有分支事务都成功时，各个参与者只需异步清理UNDO_LOG即可完成全局事务提交。</p><p><strong>补偿回滚场景</strong>：<br> 当全局事务需要回滚时，利用UNDO_LOG中的前镜像数据生成反向SQL，实现数据补偿回滚。由于全局锁的存在，可以有效避免不同全局事务间对同一行数据的脏读写问题。</p><h3 id="技术评估" tabindex="-1"><a class="header-anchor" href="#技术评估"><span>技术评估</span></a></h3><p><strong>优势</strong>：</p><ul><li><strong>业务无侵入</strong>：开发者无需修改业务代码，仅需配置代理数据源</li><li><strong>自动化程度高</strong>：SQL改写、回滚日志生成、补偿操作均由框架自动完成</li></ul><p><strong>局限性</strong>：</p><ul><li><strong>本地事务与全局事务的隔离性问题</strong>：一阶段本地事务已提交，但全局事务可能回滚，可能导致其他本地事务读取到最终会被回滚的数据，破坏了传统ACID特性</li><li><strong>性能开销</strong>：全局锁机制和UNDO_LOG的维护带来额外的性能成本</li><li><strong>单点依赖</strong>：依赖TC的可用性，在某种程度上削弱了微服务的分布式优势</li></ul><p>AT模式在技术实现上确实做到了分布式事务的无侵入解决方案，但其实现代价相对较高。对于高价值业务场景（如支付、交易等），在特定的技术背景下，这种强一致性保证仍然是最稳妥的选择。</p><h2 id="tcc模式" tabindex="-1"><a class="header-anchor" href="#tcc模式"><span>TCC模式</span></a></h2><p>TCC（Try-Confirm-Cancel）模式是一种侵入式的两阶段提交实现方案，要求业务服务实现三个原子接口。</p><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ul><li><strong>Try阶段</strong>：尝试执行业务，完成所有业务检查，预留必要的业务资源</li><li><strong>Confirm阶段</strong>：确认执行业务，使用Try阶段预留的业务资源</li><li><strong>Cancel阶段</strong>：取消执行业务，释放Try阶段预留的业务资源</li></ul><h3 id="技术优势" tabindex="-1"><a class="header-anchor" href="#技术优势"><span>技术优势</span></a></h3><ol><li><strong>真正的分布式架构</strong>：不依赖全局单点服务或数据库，具备更好的性能和可扩展性</li><li><strong>业务控制力强</strong>：业务逻辑完全由开发者控制，可以根据具体业务场景进行精细化设计</li></ol><h3 id="技术挑战" tabindex="-1"><a class="header-anchor" href="#技术挑战"><span>技术挑战</span></a></h3><ol><li><strong>业务侵入性</strong>：需要业务开发人员实现额外的TCC接口，增加开发复杂度</li><li><strong>分布式问题处理</strong>：业务层和中间件层都需要解决一系列分布式场景下的技术问题</li></ol><h4 id="幂等性处理" tabindex="-1"><a class="header-anchor" href="#幂等性处理"><span>幂等性处理</span></a></h4><p><strong>问题背景</strong>：<br> 分布式环境下，网络故障、服务重启等因素可能导致重复请求。幂等性要求同一业务实体的多次操作与单次操作效果一致，不产生额外副作用。</p><p><strong>解决方案</strong>：<br> Seata在框架层面实现幂等控制，通过维护分布式事务状态机，在二阶段Confirm成功后将事务状态标记为&quot;已提交&quot;。后续重复的Confirm请求可通过状态检查直接返回成功，避免重复执行业务逻辑。</p><h4 id="空回滚与悬挂问题" tabindex="-1"><a class="header-anchor" href="#空回滚与悬挂问题"><span>空回滚与悬挂问题</span></a></h4><p><strong>空回滚问题</strong>：<br> 当业务服务未收到Try请求但收到Cancel请求时，可能引发业务逻辑异常。</p><p><strong>悬挂问题</strong>：<br> 由于网络延迟等因素，Cancel请求可能先于Try请求到达，导致事务状态异常。</p><p><strong>解决方案</strong>：<br> Seata通过分布式事务状态机来处理这些异常场景：</p><ul><li><strong>空回滚处理</strong>：在执行Cancel前检查事务状态，若无对应Try记录则直接返回成功</li><li><strong>悬挂处理</strong>：当Cancel先于Try到达时，将事务状态标记为&quot;悬挂&quot;，后续的Try请求直接返回失败</li></ul><h2 id="saga模式" tabindex="-1"><a class="header-anchor" href="#saga模式"><span>Saga模式</span></a></h2><p>Saga模式是一种基于补偿机制实现最终一致性的分布式事务方案，其核心思想是将长事务分解为多个短事务，通过补偿操作来保证数据一致性。</p><h3 id="执行机制" tabindex="-1"><a class="header-anchor" href="#执行机制"><span>执行机制</span></a></h3><p>Saga将分布式事务分解为一系列本地事务，每个本地事务执行完成后立即提交。当某个步骤失败时，按照相反顺序执行补偿操作，撤销已完成的操作。</p><p><strong>示例场景</strong>：<br> 用户下单流程包含：账户扣款(-100) → 库存扣减(-1) → 积分增加(+100) → 订单创建</p><p>若订单创建失败，则执行补偿：<br> 积分回退(-100) → 库存恢复(+1) → 账户退款(+100)</p><h3 id="实现模式" tabindex="-1"><a class="header-anchor" href="#实现模式"><span>实现模式</span></a></h3><h4 id="编排式saga-orchestration" tabindex="-1"><a class="header-anchor" href="#编排式saga-orchestration"><span>编排式Saga（Orchestration）</span></a></h4><p>采用中心化的事务协调器，根据预定义的工作流程推进或回滚事务。Seata的Saga模式属于此类实现。</p><p><strong>特点</strong>：</p><ul><li>集中化的流程控制</li><li>配置化的事务编排</li><li>更好的可观测性和调试能力</li></ul><h4 id="协同式saga-choreography" tabindex="-1"><a class="header-anchor" href="#协同式saga-choreography"><span>协同式Saga（Choreography）</span></a></h4><p>各个业务服务根据事先约定的协议进行自主协调，无需中心化协调器。</p><p><strong>特点</strong>：</p><ul><li>真正的去中心化</li><li>更好的容错能力</li><li>在实际业务中应用更为广泛（如银行冲正、交易逆向等）</li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><p>Saga模式特别适合于对一致性要求相对宽松、可以接受最终一致性的业务场景，如订单处理、工件流程等长业务流程。</p><h2 id="xa模式" tabindex="-1"><a class="header-anchor" href="#xa模式"><span>XA模式</span></a></h2><p>XA模式基于X/Open XA标准的分布式事务协议，实现了经典的两阶段提交（2PC）机制。</p><h3 id="技术原理-1" tabindex="-1"><a class="header-anchor" href="#技术原理-1"><span>技术原理</span></a></h3><p>XA模式通过事务管理器（Transaction Manager）协调多个资源管理器（Resource Manager），确保分布式事务的ACID特性。以MySQL InnoDB为例，其原生支持XA协议。</p><h3 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程"><span>执行流程</span></a></h3><ol><li><strong>Prepare阶段</strong>：TM向所有参与者发送Prepare请求，各RM执行事务但不提交，进入准备状态</li><li><strong>Commit/Rollback阶段</strong>：根据所有参与者的Prepare响应，TM决定提交或回滚事务</li></ol><h3 id="技术特点" tabindex="-1"><a class="header-anchor" href="#技术特点"><span>技术特点</span></a></h3><p><strong>与AT模式的差异</strong>：</p><ul><li><strong>锁持有时间</strong>：XA模式在两阶段之间持续持有资源锁直到最终提交/回滚，而AT模式一阶段即提交本地事务</li><li><strong>隔离性实现层次</strong>：XA在数据库层面实现隔离性控制，AT模式在业务与数据库之间通过全局锁实现隔离</li><li><strong>性能影响</strong>：XA模式的长时间锁定对系统并发性能影响更大</li></ul><h3 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1"><span>适用场景</span></a></h3><p>XA模式适合对数据一致性要求极高、可以接受性能损耗的场景，特别是传统企业级应用的分布式事务需求。</p><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Seata提供的四种事务模式各有特点，适用于不同的业务场景：</p><ul><li><strong>AT模式</strong>：无侵入，适合快速接入分布式事务，但需要权衡性能和一致性</li><li><strong>TCC模式</strong>：高性能，业务控制力强，适合核心业务场景，但开发复杂度较高</li><li><strong>Saga模式</strong>：适合长流程业务，支持最终一致性，实现相对简单。但缺少隔离性</li><li><strong>XA模式</strong>：标准化程度高，强一致性，但性能开销较大</li></ul><p>选择合适的模式需要综合考虑业务一致性要求、性能需求、开发复杂度等多个维度。</p>`,77)]))}const k=i(t,[["render",l]]),o=JSON.parse('{"path":"/posts/seata/1.html","title":"Seata分布式事务模式详解","lang":"zh-CN","frontmatter":{"description":"Seata分布式事务模式详解 毕业前在蚂蚁实习的组通常会让实习生和校招生选择一个中间件深入学习一下，并作为答辩的一部分。当时很想选XTS，觉得分布式事务框架很牛逼。但因为选XTS的同学太多了，在老板建议下还是看了mq。好在实习也没那么多工作要做，还是看了很多XTS的分享和源码，也做了很多笔记。但离职时笔记也带不出来，时间长了很多细节都忘了。 分布式事务...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Seata分布式事务模式详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-06T13:46:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lixingjia\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/seata/1.html"}],["meta",{"property":"og:site_name","content":"lxj的博客"}],["meta",{"property":"og:title","content":"Seata分布式事务模式详解"}],["meta",{"property":"og:description","content":"Seata分布式事务模式详解 毕业前在蚂蚁实习的组通常会让实习生和校招生选择一个中间件深入学习一下，并作为答辩的一部分。当时很想选XTS，觉得分布式事务框架很牛逼。但因为选XTS的同学太多了，在老板建议下还是看了mq。好在实习也没那么多工作要做，还是看了很多XTS的分享和源码，也做了很多笔记。但离职时笔记也带不出来，时间长了很多细节都忘了。 分布式事务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T13:46:19.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T13:46:19.000Z"}]]},"git":{"createdTime":1749217579000,"updatedTime":1749217579000,"contributors":[{"name":"lixingjia","username":"lixingjia","email":"xingjia.li@qq.com","commits":1,"url":"https://github.com/lixingjia"}]},"readingTime":{"minutes":9.01,"words":2704},"filePathRelative":"posts/seata/1.md","excerpt":"\\n<p>毕业前在蚂蚁实习的组通常会让实习生和校招生选择一个中间件深入学习一下，并作为答辩的一部分。当时很想选XTS，觉得分布式事务框架很牛逼。但因为选XTS的同学太多了，在老板建议下还是看了mq。好在实习也没那么多工作要做，还是看了很多XTS的分享和源码，也做了很多笔记。但离职时笔记也带不出来，时间长了很多细节都忘了。<br>\\n分布式事务框架在现在的互联网绝非常用的框架，大多数场景下也绝非好的选择。但依然可以从中看到阿里蚂蚁多年的技术沉淀。开源的seata吸收了淘宝TXC和蚂蚁XTS，希望可以学到老牌大厂半个时代之前的中间件开发者对技术和业务的思考。</p>\\n<p>对Seata的学习可以分成几个部分吧</p>","autoDesc":true}');export{k as comp,o as data};
